@page "/orders"
@using Shop.Model.CustomModels;
@using Shop.Model.Models;
@using Shop.Admin.Services;
@inject ProtectedSessionStorage sessionStorage;
@inject IAdminPanelService adminPanelServices;



<h3>Orders</h3>

<style>
    .modal {
        display: block !important;
    }
</style>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Order #</th>
            <th>Total </th>
            <th>Order Date</th>
            <th>Track?</th>
            <th>Detail?</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var temp in customerOrders)
        {
            <tr>
                <td>@temp.OrderId</td>
                <td>@temp.Total</td>
                <td>@temp.CreatedOn</td>
                <td><input type="button" class="btn btn-primary" value="Track" @onclick="(()=>Track_Click(temp.OrderId))" /></td>
                <td><input type="button" class="btn btn-primary" value="Detail" @onclick="(()=>Detail_Click(temp.OrderId))" /></td>
            </tr>
        }
    </tbody>
</table>

@if (showTrack == true)
{
    <div class="modal">
        <div class="modal-dialog" role="document">
            <div class="modal-body">
                <div class="modal-header">
                    <h4>Track Order</h4>
                    <span class="close" @onclick="ToggleTrackPopup">&times;</span>
                </div>
                <div class="modal-content">
                    <EditForm Model="_customerOrderModel" OnValidSubmit="ToggleTrackPopup">
                        <div class="form-group col-3">
                            <label>-- Select Status --</label>
                            <select class="form-control" @onchange="@StatusChanged">
                                <option>Dispatched</option>
                                <option>On Transit</option>
                            </select>
                        </div>
                        <InputTextArea>Comment</InputTextArea>
                        <input type="button" class="btn btn-primary" value="Update" />
                    </EditForm>

                </div>
                <div class="modal-footer">
                    <button @onclick="ToggleTrackPopup">Close</button>
                </div>

            </div>
        </div>
    </div>
}

@if (showOrderDetail == true)
{
    <div class="modal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5>Order Details</h5>
                    <span class="close" @onclick="ToggleOrderDetailPopup">&times;</span>
                </div>
                <div class="modal-body">
                    @if (myCart != null && @myCart.Count > 0)
                    {
                        <table class="table table-bordered">
                            @foreach (var temp in myCart)
                            {
                                <tr>
                                    <td style="padding:0px;">

                                        <img src="http://localhost:42275/@temp.ProductImage" alt="Product photo" style="width:50px;height:50px;" />
                                        <div>
                                            <p>@temp.ProductName</p>
                                        </div>

                                    </td>

                                    <td style="padding:0px;">@temp.Quantity X @temp.price</td>
                                    <td style="padding:0px;">@(temp.Quantity*temp.price)</td>
                                </tr>
                            }
                        </table>
                        <table>
                            <tr>
                                <td>Sub Total - @subTotal</td>
                                <td>Shipping charges - @shippingCharges</td>
                            </tr>
                            <tr>
                                <td>Total - @Total</td>
                                <td>Shipping Address - @shippingAddress</td>
                            </tr>
                            <tr>
                                <td>Payment Mode - @paymentMode</td>
                            </tr>
                        </table>
                    }
                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleOrderDetailPopup" />
                </div>
            </div>
        </div>

    </div>
}

@code {

    [CascadingParameter]
    public EventCallback notify { get; set; }

    public List<CustomerOrder> customerOrders;
    public CustomerOrder _customerOrderModel { get; set; }
    public string _order { get; set; }
    public string shippingStatus { get; set; }
    private bool showTrack = false;
    private bool showOrderDetail = false;

    public List<CartModel> myCart { get; set; }
    public string shippingAddress { get; set; }
    public int shippingCharges { get; set; }
    public string paymentMode { get; set; }
    public int subTotal { get; set; }
    public int Total { get; set; }

    protected async override Task OnInitializedAsync()
    {
        customerOrders = new List<CustomerOrder>();
        await GetOrderbyAllCustomers();
    }
    private async Task GetOrderbyAllCustomers()
    {
        customerOrders = await adminPanelServices.GetAllOrders();
    }

    private void Track_Click(string _order)
    {

        ToggleTrackPopup();
    }
    private async Task Detail_Click(string _order)
    {
        myCart = await adminPanelServices.GetOrderDetailForCustomer(_order);
        if (myCart != null && myCart.Count > 0)
        {
            shippingAddress = myCart.FirstOrDefault().ShippingAddress;
            shippingCharges = myCart.FirstOrDefault().ShippingCharges;
            subTotal = myCart.FirstOrDefault().SubTotal;
            Total = myCart.FirstOrDefault().Total;
            paymentMode = myCart.FirstOrDefault().PaymentMode;
        }
        ToggleOrderDetailPopup();
    }
    private void ToggleTrackPopup()
    {
        showTrack = showTrack == false ? true : false;
    }
    private void ToggleOrderDetailPopup()
    {
        showOrderDetail = showOrderDetail == false ? true : false;
    }
    private void StatusChanged(ChangeEventArgs changeEvent)
    {
        if (!string.IsNullOrEmpty(Convert.ToString(changeEvent)))
        {
            shippingStatus = Convert.ToString(changeEvent.Value);
            _customerOrderModel.ShippingStatus = shippingStatus;
            this.StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }
}
