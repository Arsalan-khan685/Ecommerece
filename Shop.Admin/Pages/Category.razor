@page "/category"
@using Shop.Admin.Services
@using Shop.Model.CustomModels
@inject IAdminPanelService adminPanelServices;

<style>
    .modal
    {
        display:block !important;
    }
</style>

@if (categoryModel == null)
{
    <p><em>Loading......</em></p>
}
else
{
    <div class="card">
        <h3 class="card-header">Category</h3>
        <div class="card-body">
            <EditForm Model="@categoryModel" OnValidSubmit="SaveCategory">
                <DataAnnotationsValidator />
                <div class="form-row">
                    <div class="form-group col-sm-8">
                        <label for="name" class="col-sm-3 control-label">Category Name:</label>
                        <div class="col-sm-5">
                            <InputText type="text" name="categoryName" id="categoryName" class="form-control" @bind-Value="categoryModel.CategoryName" />
                            <ValidationMessage For="@(() => categoryModel.CategoryName)" />
                        </div>
                    </div>
                </div>
                <div class="text-left">
                    <input type="submit" class="btn btn-primary" value="Save" />
                    <input type="button" class="btn btn-primary" value="Clear" @onclick="ClearForm" />
                </div>

            </EditForm>
        </div>
        <div class="card-body bg-dark">
            @if (categoryList == null)
            {
                <p><em>Loading........</em></p>
            }
            else
            {
                <table class="table table-striped table-bordered bg-light">
                    <thead>
                        <tr>
                            <th>S.NO</th>
                            <th>Category Name</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{var sno = 1; }

                        @foreach (var temp in categoryList)
                        {
                            <tr>
                                <td>@sno</td>
                                <td>@temp.CategoryName</td>
                                <td>
                                    <input type="button" class="btn btn-primary" value="Edit" @onclick="() => OnRowEdit(temp)" />
                                    <input type="button" class="btn btn-primary" value="Delete" @onclick="() => Delete(temp)" />
                                </td>
                            </tr>
                            sno++;
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}


@if (ShowEditPopup == true)
{
    <div class="modal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Category</h5>
                        <span aria-hidden="true" class="close" @onclick="ToggleEditPopup">&times;</span>
                </div>
                <div class="modal-body">
                    <EditForm Model="@categoryToUpdate" OnValidSubmit="UpdateCategory">
                        <DataAnnotationsValidator />
                        <div class="form-row">
                            <div class="form-group">
                                <label>Name: </label>
                                <InputText @bind-Value="categoryToUpdate.CategoryName" class="form-control" />
                                <ValidationMessage For="@(() => categoryToUpdate.CategoryName)" />
                            </div>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-primary" value="Update" @onclick="UpdateCategory" />
                    <input type="button" class="btn btn-primary" value="cancel" @onclick="ToggleEditPopup" />

                </div>
            </div>
        </div>
    </div>
}

@if (ShowDeletePopup==true) 
{
    <div class="modal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Popup</h5>
                        <span aria-hidden="true" class="close" @onclick="ToggleDeletePopup">&times;</span>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete @categoryToDelete.CategoryName Category
                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-primary" value="Yes" @onclick="DeleteCategory" />
                    <input type="button" class="btn btn-primary" value="No" @onclick="ToggleDeletePopup" />
                </div>
            </div>
        </div>
    </div>
}

@if (SuccessPopup == true)
{
    <div class="modal" >
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Succes Popup</h5>
                        <span aria-hidden="true" class="close" @onclick="ToggleSuccessPopup">&times;</span>
                </div>
                <div class="modal-body">
                    @Message
                </div>
                <div class="modal-footer">
                    <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
                </div>
            </div>
        </div>
    </div>
} 

 
@code
{
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public CategoryModel categoryModel { get; set; }
    public List<CategoryModel> categoryList { get; set; }
    public CategoryModel categoryToUpdate { get; set; }
    public CategoryModel categoryToDelete { get; set; }
    public bool ShowEditPopup { get; set; }
    public bool ShowDeletePopup { get; set; }
    public bool SuccessPopup { get; set; }
    public string Message = String.Empty;


    protected override async Task OnInitializedAsync()
    {
        categoryModel = new CategoryModel();
        categoryToUpdate = new CategoryModel();
        await GetCategories();
    }

    private async Task SaveCategory()
    {
        await adminPanelServices.SaveCategory(categoryModel);
        Message = "Category Added Succcesfully !!";
        ToggleSuccessPopup();
        await GetCategories();
        ClearForm();

    }
    private async Task UpdateCategory()
    {
        bool flag = await adminPanelServices.UpdateCategories(categoryToUpdate);
        ToggleEditPopup();
        if (flag)
        {
            Message = "Category Updated Succesfully!.";
        }
        else
        {
            Message = "Category Not Updated , Try Again!.";
        }
        ToggleSuccessPopup();
        categoryToUpdate = new CategoryModel();
        await GetCategories();
    }
    private async Task DeleteCategory()
    {
        bool flag = await adminPanelServices.DeleteCategories(categoryToDelete);
        ToggleDeletePopup();
        if (flag)
        {
            Message = "Category Deleted Succesfully!.";
        }
        else
        {
            Message = "Category Not Deleted , Try Again!.";
        }
        ToggleSuccessPopup();
        categoryToUpdate = new CategoryModel();
        await GetCategories();
    }
    private void ClearForm()
    {
        categoryModel = new CategoryModel();
    }
    private async Task GetCategories()
    {
        categoryList = await adminPanelServices.GetCategories();
    }
    private void OnRowEdit(CategoryModel _cat)
    {
        categoryToUpdate = _cat;
        ToggleEditPopup();
    }
    private void Delete(CategoryModel _cat)
    {
        categoryToDelete = _cat;
        ToggleDeletePopup();
    }

    private void ToggleSuccessPopup()
    {
        SuccessPopup = SuccessPopup == true ? false : true;
    }
    private void ToggleEditPopup()
    {
        ShowEditPopup = ShowEditPopup == true ? false : true;
    }
    private void ToggleDeletePopup()
    {
        ShowDeletePopup = ShowDeletePopup == true ? false : true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }
}
