@page "/"
@using Shop.Model.CustomModels;
@using Shop.Web.Services;
@inject IUserPanelService userPanelService;
@inject ProtectedSessionStorage sessionStorage;
@inject NavigationManager navManager;
<style>
    .column{
        float:left;
        padding:35px;
        
    }
    .menu {
        width: 25%;
        height:400px;
        margin-top: 45px;
        padding-top: 15px;
        padding-bottom: 10px;
        margin-bottom: 15px;
        border: 1px outset #808080;
        border-radius: 7px;
        background: linear-gradient(-10deg,#ffd800,#808080,#23a6d5,#f5f542);
        color: black;
        overflow: scroll;
        margin-right:5px;
    }
    .content {
        width: 70%;
        float:right;
        margin-top: 45px;
        padding-top: 15px;
        height: 400px;
        overflow: scroll;
    }
    .menu ul{
        list-style-type:none;
        margin:0;
        padding:0;
    }
    .menu li{
        padding:8px;
        margin-bottom:8px;
        color:black;
        background-color:white;
    }
    .menu li:hover{
        background-color:#e7e7e4;
        color:#808080;
    }
    .stuff{
        padding:8px;
        margin:1px;
        background-color:white;
        border:1px outset black;
    }
    .add-to-cart{
        border:1px outset #808080;
        width:100%;
        background-color:#b6ff00;
    }


</style>
<div style="height:500px;">
    <div class="column menu">
        @if (_listOfCatgories == null)
         {
             <p><em>Loading......</em></p>
         }
         else
         {
            <div>
                <h5>Shopping List</h5>
            </div>
            <ul>
                @foreach (var temp in _listOfCatgories)
                {
                    <li @onclick="(()=>LoadProductByCategory(temp))">@temp.CategoryName</li>
                }
            </ul>
         }
    </div>
    <div class="column content">
        @if (_listOfProducts == null) 
        {
            <p><em>Laoding.....</em></p>
        }
        else
        {
            <div class="container">
                <div>
                    <h5>@categoryName</h5>
                </div>
                <div class="row">
                    @foreach(var temp in _listOfProducts)
                     {
                        <div class="col-md-4">
                            <div class="col-md-12 stuff" style="height:300px;margin-bottom:25px;border-radius:10px;">
                                <div style="width:100%;background-color:white;">
                                    <button type="button" class="btn" style="border:2px #cff7f9 inset; width:100%;">@temp.ProductName</button>
                                    <img src="http://localhost:42275/@temp.ImageUrl" style="width:100%;height:120px;" />
                                    <div>
                                        <p>Price: Rs @temp.Price <br />Stock: @temp.Stock</p>
                                    
                                    </div>
                                    @if (temp.CartFlag)
                                    {
                                        <button type="button" class="btn add-to-cart" @onclick="(()=>AddToCart_Click(temp))">Remove From Cart</button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn add-to-cart" @onclick="(()=>AddToCart_Click(temp))">Add To Cart</button>
                                    }
                                </div>
                            </div>
                        </div>
                  
                        
                     }
                </div>
            </div>
        }
    </div>
</div>

@code{
    public List<CategoryModel> _listOfCatgories { get; set; }
    public List<ProductModel> _listOfProducts { get; set; }
    public string categoryName = string.Empty;
    public bool CartFlag = false;
    public List<CartModel> myCart { get; set; }

    [CascadingParameter]
    public EventCallback notify { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
    }
    private async Task GetCategories()

    {
        _listOfCatgories = await userPanelService.GetCategories();
        if(_listOfCatgories!=null && _listOfCatgories.Count > 0)
        {
            await LoadProductByCategory(_listOfCatgories.FirstOrDefault());
        }
    }
    private async Task LoadProductByCategory(CategoryModel category)
    {
        categoryName = category.CategoryName;
        _listOfProducts = await userPanelService.GetProductByCategoryId(category.CategoryID);
        await updateCartText();
    }
    public async Task AddToCart_Click(ProductModel prod)
    {
        CartFlag = true;
        var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
        if (!result.Success)
        {
            myCart = new List<CartModel>();
            if (prod.CartFlag)
            {
                var existing_product = myCart.Where(x => x.ProductID == prod.ProductID).FirstOrDefault();
                if (existing_product != null)
                {
                    myCart.Remove(existing_product);
                    await sessionStorage.SetAsync("myCart", myCart);
                }
            }
            else
            {
                CartModel cm = new CartModel();
                cm.ProductID = prod.ProductID;
                cm.Quantity = 1;
                cm.AvailableStock = prod.Stock;
                cm.ProductName = prod.ProductName;
                cm.ProductImage = prod.ImageUrl;
                cm.price = prod.Price;
                myCart.Add(cm);

                await sessionStorage.SetAsync("myCart", myCart);
            }
        }
        else
        {
            myCart = result.Value;
            if (prod.CartFlag)
            {
                var existing_product = myCart.Where(x => x.ProductID == prod.ProductID).FirstOrDefault();
                if (existing_product != null)
                {
                    myCart.Remove(existing_product);
                    await sessionStorage.SetAsync("myCart", myCart);
                }
            }
            else
            {
                CartModel cm = new CartModel();
                cm.ProductID = prod.ProductID;
                cm.Quantity = 1;
                cm.AvailableStock = prod.Stock;
                cm.ProductName = prod.ProductName;
                cm.ProductImage = prod.ImageUrl;
                cm.price = prod.Price;
                myCart.Add(cm);

                await sessionStorage.SetAsync("myCart", myCart);
            }
        }

        await updateCartText();
        await notify.InvokeAsync();
    }
    private async Task updateCartText()
    {
        if (CartFlag)
        {
            var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
            if (result.Success)
            {
                foreach(var prod in _listOfProducts)
                {
                    prod.CartFlag = false;
                }
                myCart = result.Value;
                foreach(var cart in myCart)
                {
                    var cartProd = _listOfProducts.Where(x => x.ProductID == cart.ProductID).FirstOrDefault();
                    if (cartProd != null)
                    {
                        cartProd.CartFlag = true;
                    }
                }
            }
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
            if (result.Success)
            {
                CartFlag = true;
            }
        }
    }

}