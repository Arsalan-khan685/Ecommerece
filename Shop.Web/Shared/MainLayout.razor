@inherits LayoutComponentBase
@using Shop.Web.Services;
@using Shop.Model.CustomModels;
@inject IUserPanelService userPanelService
@inject ProtectedSessionStorage sessionStorage;
@inject NavigationManager navManager;

    <style>
        .mainLayout {
            max-width: 1000px;
            margin: auto;
            background: white;
            padding: 10px;
        }

        * {
            box-sizing: border-box;
        }

        .header {
            color: black;
            padding: 5px;
            border: 1px groove #808080;
            border-radius: 14px;
            background: linear-gradient(-45deg,#ffd800,#808080);
            background-size: 400% 400%;
        }

        .footer {
            color: black;
            padding: 5px;
            border: 1px groove #808080;
            border-radius: 7px;
            background: linear-gradient(-45deg,#ffd800,#808080);
            background-size: 400% 400%;
        }
        .col-container{
            display:table;
            width:100%;
            
            border-radius:25px;
        }
        .col{
            display:table-cell;
            padding:16px;
        }
        .divleft{
            float:left;
        }
        .divright{
            float:right;
        }
    </style>

    <div class="mainLayout container">
        <div style="padding-bottom:30px;">
            <div class="divleft" style="padding-left:20px;padding-right:10px;">
                <NavLink href="/">
                    Home
                </NavLink>
            </div>
            <div class="divleft" style="padding-left:15px;">
                @if (UserLoggedIn)
                {
                    <i class="fa fa-user"></i><span>Welcome @LoggedInUserName</span>
                }
                else
                {
                    <i class="fa fa-user"><span>Welcome</span></i>
                }
            </div>
            <div class="divright" style="padding-left:10px;">
                @if (UserLoggedIn)
                {
                    <NavLink href="myaccount">
                        My Account
                    </NavLink>
                }
                @if (UserLoggedIn)
                {
                    <i class="fa fa-sign-out"></i><a @onclick="@Logout" href="#">Logout</a>
                }

            </div>

            <div class="divright" style="padding-left:20px;padding-right:10px;">
                @if (!UserLoggedIn)
                {
                    <NavLink href="Login">
                        Login
                    </NavLink>
                }
            </div>
            <div class="divright" >
                @if (!UserLoggedIn)
                {
                    <NavLink href="Register">
                        Register
                    </NavLink>
                }
            </div>
        </div>

        <div class="header">
            <div class="col-container">
                <div class="col" style="border-radius:25px;">
                    <NavLink>
                        <img src="Images/Shopping_logo.png" style="cursor:pointer; width:200px;height:200px;" />
                    </NavLink>
                </div>
                <div class="col">
                    <a href="/mycart">
                        <i class="fa fa-shopping-cart" style="font-size:76px;color:black">
                            <span style="font-size:55px;vertical-align:top;color:black;border-radius:50%;padding-top:20px; font-weight:bold;"><sup>@CartCount</sup></span>
                        </i>
                    </a>
                </div>
            </div>
        </div>
        <div>
            <CascadingValue Value="event_notify">
                @Body
            </CascadingValue>
        </div>
        <div class="footer">
            &copy; 2022 -- Ecommerce Website
        </div>
    </div>

@code{
    public int CartCount = 0;
    public int layoutState = 0;
    public bool UserLoggedIn = false;
    public string LoggedInUserName = "user";
    public List<CartModel> myCart { get; set; }

    EventCallback event_notify => EventCallback.Factory.Create(this, NotifyLayout);

    private async Task NotifyLayout()
    {
        UserLoggedIn = await userPanelService.IsUserLoggedIn();
        if (UserLoggedIn && layoutState == 0)
        {
            var userNameSession = await sessionStorage.GetAsync<string>("userName");
            LoggedInUserName = userNameSession.Value;
            var checkoutSession = await sessionStorage.GetAsync<string>("checkoutAlert");
            if (checkoutSession.Success)
            {
                await sessionStorage.DeleteAsync("checkoutAlert");
                navManager.NavigateTo("/myCart");
            }
            StateHasChanged();
            layoutState++;
        }

        if (layoutState == -1)
        {
            StateHasChanged();
        }
        var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
        if (result.Success)
        {
            myCart = result.Value;
            CartCount = myCart.Count;
            await sessionStorage.DeleteAsync("updateCartFlag");
            StateHasChanged();
        }
        else
        {
            CartCount = 0;
        }
    }

    private async void Logout()
    {
        await sessionStorage.DeleteAsync("userKey");
        await sessionStorage.DeleteAsync("userName");
        await sessionStorage.DeleteAsync("Email");
        await NotifyLayout();
        navManager.NavigateTo("/");
        layoutState = -1;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await NotifyLayout();
        }
    }
}