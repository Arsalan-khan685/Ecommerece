@page "/products"
@using Shop.Model.CustomModels
@using Shop.Admin.Services
@inject IAdminPanelService adminPanelServices;
@using System.IO;

<style>
    .modal {
        display: block !important;
    }

</style>
@if (productModel == null) 
{
    <p><em>Loading</em></p>
}
else
{
    <div class="card">
        <h4 class="card-header">Product</h4>
        <div class="card-body">
            <EditForm Model="@productModel" OnValidSubmit="SaveProduct">
                <DataAnnotationsValidator />
                <div class="form-row">
                    <div class="form-group col-3">
                        <label>Product Name: </label>
                        <InputText @bind-Value="productModel.ProductName" class="form-control" />
                        <ValidationMessage For="@(() => productModel.ProductName)" />
                    </div>
                    <div class="form-group col-3">
                        <label>Price: </label>
                        <InputNumber @bind-Value="productModel.Price" class="form-control" />
                        <ValidationMessage For="@(() => productModel.Price)" />
                    </div>
                    <div class="form-group col-3">
                        <label>Stock: </label>
                        <InputNumber @bind-Value="productModel.Stock" class="form-control" />
                        <ValidationMessage For="@(() => productModel.Stock)" />
                    </div>
                    <div class="form-group col-3">
                        <label>Select Category : </label>
                        @if (categoryList != null)
                        {
                            <select class="form-control" @onchange="@CategoryClicked">
                                <option value="">-- Select --</option>
                                @foreach(var cat in categoryList)
                                {
                                    <option value="@cat.CategoryID">@cat.CategoryName</option>
                                }
                            </select>
                        }
                        <ValidationMessage For="@(() => productModel.Category_ID)" />
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-3">
                        <label>Select photo: </label>
                        <InputFile OnChange="@OnInputFileChange" multiple/>
                        <ValidationMessage For="@(()=>productModel.FileName)" />
                        <table>
                            <tr>
                                @foreach (var imgsrc in imageUrls)
                                {
                                    <td><img src="@imgsrc" /></td>
                                }
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="text-left">
                    <input type="submit" class="btn btn-primary" value="Save" />
                    <input type="submit" class="btn btn-primary" value="clear" @onclick="ClearForm" />
                </div>
            </EditForm>
        </div>
        <div class="card-body">
            @if (productList == null) 
            {
                 <p><em>Loading......</em></p>
            }
            else
            {
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>S.No </th>
                            <th>Product Name</th>
                            <th>Price</th>
                            <th>Stock</th>
                            <th>Category</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ var sno = 1;}
                        @foreach(var temp in productList)
                        {
                            <tr>
                                <td>@sno</td>
                                <td>@temp.ProductName</td>
                                <td>@temp.Price</td>
                                <td>@temp.Stock</td>
                                <td>@temp.Category_Name</td>
                                <td>
                                    <input type="button" class="btn btn-danger" value="Delete"  @onclick="(() => Delete(temp))" />
                                </td>
                            </tr>
                            sno++;
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@if (showDeletePopup == true) 
{
<div class="modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Popup</h5>
                <span aria-hidden="true" class="close" @onclick="ToggleDeletePopup">&times;</span>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <b>@productToDelete.ProductName</b> Product
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Yes" @onclick="DeleteProduct" />
                <input type="button" class="btn btn-primary" value="No" @onclick="ToggleDeletePopup" />
            </div>
        </div>
    </div>
</div>
}
@if (successPopup == true) 
{
<div class="modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Succes Popup</h5>
                <span aria-hidden="true" class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
</div>
}


@code 
{
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public List<CategoryModel> categoryList { get; set; }
    public ProductModel productModel { get; set; }
    public List<ProductModel> productList { get; set; }
    public ProductModel productToUpdate { get; set; }
    public ProductModel productToDelete { get; set; }
    public bool showEditPopup { get; set; }
    public bool showDeletePopup { get; set; }
    public bool successPopup { get; set; }
    public string Message { get; set; }
    public int Category_ID { get; set; }
    IReadOnlyList<IBrowserFile> selectedFiles;
    List<string> imageUrls = new List<string>();



    protected override async Task OnInitializedAsync()
    {
        productModel = new ProductModel();
        await GetCategories();
        await GetProducts();
    }
    private async Task GetCategories()
    {
        categoryList = await adminPanelServices.GetCategories();
    }
    private void ClearForm()
    {
        productModel = new ProductModel();
        imageUrls = new List<string>();
    }
    private void CategoryClicked(ChangeEventArgs categoryEvent)
    {
        if (!string.IsNullOrEmpty(Convert.ToString(categoryEvent)))
        {
            Category_ID = Convert.ToInt32(categoryEvent.Value);
            productModel.Category_ID = Category_ID;
            this.StateHasChanged();
        }
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        productModel.FileName = string.Empty;
        foreach(var imageFile in selectedFiles)
        {
            var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            imageUrls.Add(imageData);
            productModel.FileName = imageData;
        }
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }
    private async Task GetProducts()
    {
        productList = await adminPanelServices.GetProducts();
    }
    private async Task SaveProduct()
    {
        Stream stream = selectedFiles.FirstOrDefault().OpenReadStream();
        MemoryStream ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        stream.Close();

        productModel.Category_ID = Category_ID;
        productModel.FileName = selectedFiles.FirstOrDefault().Name;
        productModel.FileContent = ms.ToArray();

        await adminPanelServices.SaveProduct(productModel);
        await GetProducts();
        ClearForm();
    }
    private async Task DeleteProduct()
    {
        productToDelete.FileName = "demofile";
        bool flag = await adminPanelServices.DeleteProduct(productToDelete);
        ToggleDeletePopup();
        if (flag)
        {
            Message = "Product Deleted Succesfully";
        }
        else
        {
            Message = "Can not delted product";
        }
        ToggleSuccessPopup();
        productToDelete = new ProductModel();
        await GetProducts();
    }
    private void ToggleEditPopup()
    {
        showEditPopup = showEditPopup == true ? false : true;
    }
    private void ToggleDeletePopup()
    {
        showDeletePopup = showDeletePopup == true ? false : true;
    }
    private void ToggleSuccessPopup()
    {
        successPopup = successPopup == true ? false : true;
    }
    private void OnRowEdit(ProductModel _prod)
    {
        productToUpdate = _prod;
        ToggleEditPopup();
    }
    private void Delete(ProductModel _prod)
    {
        productToDelete = _prod;
        ToggleDeletePopup();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }
}
