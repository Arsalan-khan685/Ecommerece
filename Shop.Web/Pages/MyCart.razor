@page "/Mycart"
@using Shop.Web.Services;
@inject IUserPanelService userPanelService;
@inject ProtectedSessionStorage sessionStorage;
@using Shop.Model.CustomModels;
@inject NavigationManager navManager;

<style>
    .small-container{
        max-width:1080px;
        margin:auto;
        padding-left:10px;
        padding-right:10px;
    }
    .cart-page{
        margin:20px auto;
    }
    table{
        width:100%;
        border-collapse:collapse;
    }
    .cart-info{
        display:flex;
        flex-wrap:wrap;
    }
    th{
        text-align:left;
        padding:5px;
        color:#ffffff;
        background:#808080;
        font-weight:normal;
    }
    td{
        padding:10px 5px;
    }
        td input{
            width:40px;
            height:30px;
            padding:5px;
        }
        td a{
            color:#ff523b;
            font-size:12px;
        }
        td img{
            width:80px;
            height:80px;
            margin-right:10px;
        }
    .total-price{
        display:flex;
        justify-content:flex-end;
    }
        .total-price table{
            border-top:3px solid #ff523b;
            width:100%;
            max-width:500px;
        }
    td:last-child{
        text-align:right;
    }
    th:last-child{
        text-align:right;
    }
</style>

<div style="text-align:right; padding: 10px 0px 0px 10px;">
    @if( @userName != null && @Email != null)
    {
    <span>
        <span style="border:1px ridge #ff523b; background-color:#ff6a00;border-radius:5px;padding:3px;color:#ffffff;">My cart</span>
        &nbsp;&nbsp;
        <b>
            Name : @userName
            &nbsp;&nbsp;
            Email : @Email
        </b>
    </span>
    
    }
    @if(myCart!=null && myCart.Count > 0)
     {
        <button class="btn btn-primary" @onclick="@Clear_Cart">Clear Cart</button>
     }

</div>

<div class="small-container cart-page">
    @if(@myCart!=null && @myCart.Count > 0)
    {
        <table>
            <tr>
                <th>Product</th>
                <th>Remove</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Subtotal</th>
            </tr>
            @foreach (var temp in myCart) 
            {
                <tr>
                    <td>
                        <div class="cart-info">
                            <img src="http://localhost:42275/@temp.ProductImage" alt="Product photo" />
                            <div>
                                <p>@temp.ProductName</p>
                            </div>
                        </div>
                    </td>
                    <td>
                        <a @onclick="(() => RemoveFromCart_Click(temp))" style="cursor:pointer;">Remove from cart</a>
                    </td>
                    <td>@temp.price</td>
                    <td><input type="number" @bind="temp.Quantity" min="1" max="@temp.AvailableStock" @onclick="@OnQuantityChange"/></td>
                    <td>@(temp.price*temp.Quantity).00</td>
                </tr>
            }
        </table>
        <div class="total-price">
            <table >
                <tr>
                    <td>Subtotal</td>
                    <td>@subTotal</td>
                </tr>
                <tr>
                    <td>Shipping charges</td>
                    <td>@shippingCharges</td>
                </tr>
                <tr>
                    <td>Total</td>
                    <td>@finalTotal</td>
                </tr>
                <tr>
                    <td>Shipping Addres</td>
                    <td><textarea rows="3" cols="30" name="shippingaddress" placeholder="Shipping Address" @bind="shippingAddress"></textarea></td>
                </tr>
                <tr>
                    <td>Payment Mode</td>
                    <td>@paymentMode</td>
                </tr>
                <tr>
                    <td></td>
                    <td><button type="button" value="Checkout" class="btn btn-primary" @onclick="Checkout_click">Check out</button></td>
                </tr>
            </table>
        </div>
    }

    else
    {
        <hr />
        <div style="text-align:center;">
            <p><h3><b>No product in the cart</b></h3></p>
            <img src="Images/empty_Cart.jpg" style="height:500px;width:500px;" />
        </div>
    }
</div>

@code {

    [CascadingParameter]
    public EventCallback notify { get; set; }

    public List<CartModel> myCart { get; set; }
    public string shippingAddress {get;set;}
    public string paymentMode { get; set; }
    public int subTotal { get; set; }
    public int shippingCharges { get; set; }
    public int finalTotal { get; set; }

    public string userName { get; set; }
    public string Email { get; set; }
    public bool IsUserLoggedIn = false;

    protected override Task OnInitializedAsync()
    {
        shippingCharges = 100;
        subTotal = 0;
        paymentMode = "Cash on delievery";
        return base.OnInitializedAsync();
    }

    private async Task RemoveFromCart_Click(CartModel cartItem)
    {
        myCart.Remove(cartItem);
        await sessionStorage.SetAsync("myCart", myCart);
        OnQuantityChange();

        await notify.InvokeAsync();
    }
    private void OnQuantityChange()
    {
        finalTotal = 0;
        subTotal = 0;
        foreach(var cart in myCart)
        {
            subTotal = subTotal + (cart.price * cart.Quantity);
        }
        finalTotal = subTotal + shippingCharges;
    }
    private async Task Checkout_click()
    {
        if(myCart!=null && myCart.Count > 0)
        {
            myCart.FirstOrDefault().ShippingAddress = shippingAddress;
            myCart.FirstOrDefault().ShippingCharges = shippingCharges;
            myCart.FirstOrDefault().SubTotal = subTotal;
            myCart.FirstOrDefault().PaymentMode = paymentMode;

            var session_userKey = await sessionStorage.GetAsync<string>("userKey");
            if (session_userKey.Success)
            {
                myCart.FirstOrDefault().UserID = Convert.ToInt32(session_userKey.Value);
            }
            await sessionStorage.SetAsync("myCart", myCart);
            IsUserLoggedIn = await userPanelService.IsUserLoggedIn();
            if (IsUserLoggedIn)
            {
                var response = await userPanelService.CheckOut(myCart);
                if(response != null)
                {
                    myCart.Clear();
                    await sessionStorage.SetAsync("myCart", myCart);
                    await sessionStorage.SetAsync("latestOrder", response.Message);
                    await notify.InvokeAsync();
                    navManager.NavigateTo("myaccount");
                }
            }
            else
            {
                await sessionStorage.SetAsync("checkoutAlert", "* Login / Register first to place your order");
                navManager.NavigateTo("login");
            }
        }
    }
    private async void Clear_Cart()
    {
        myCart = new List<CartModel>();
        await sessionStorage.DeleteAsync("myCart");
        await notify.InvokeAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
            if (result.Success)
            {
                myCart = result.Value;
                foreach(var cartItem in myCart)
                {
                    subTotal = subTotal + (cartItem.price * cartItem.Quantity);
                }
                if(myCart!=null && myCart.Count > 0)
                {
                    shippingAddress = myCart.FirstOrDefault().ShippingAddress;
                }
            }
            finalTotal = subTotal + shippingCharges;

            var session_userName = await sessionStorage.GetAsync<string>("userName");
            var session_Email = await sessionStorage.GetAsync<string>("userEmail");
            if (session_userName.Success && session_Email.Success)
            {
                userName = session_userName.Value;
                Email = session_Email.Value;
            }


            StateHasChanged();
        }

    }
}
